import cv2
import numpy as np
import os

def rotate_image(image_path, angle):
    """
    ‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏≠‡∏á‡∏®‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏Ç‡∏≠‡∏ö‡∏î‡∏≥‡∏≠‡∏≠‡∏Å
    """
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    img = cv2.imread(image_path)
    if img is None:
        raise ValueError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")
    
    # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ
    height, width = img.shape[:2]
    center = (width // 2, height // 2)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á rotation matrix
    rotation_matrix = cv2.getRotationMatrix2D(center, angle, 1.0)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î
    cos = np.abs(rotation_matrix[0, 0])
    sin = np.abs(rotation_matrix[0, 1])
    new_width = int((height * sin) + (width * cos))
    new_height = int((height * cos) + (width * sin))
    
    # ‡∏õ‡∏£‡∏±‡∏ö rotation matrix ‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
    rotation_matrix[0, 2] += (new_width / 2) - center[0]
    rotation_matrix[1, 2] += (new_height / 2) - center[1]
    
    # ‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà
    rotated_img = cv2.warpAffine(img, rotation_matrix, (new_width, new_height), 
                                 borderMode=cv2.BORDER_CONSTANT, borderValue=(0, 0, 0))
    
    # ‡∏ï‡∏±‡∏î‡∏Ç‡∏≠‡∏ö‡∏î‡∏≥‡∏≠‡∏≠‡∏Å
    cropped_img = crop_black_borders(rotated_img)
    
    return cropped_img

def crop_black_borders(image):
    """
    ‡∏ï‡∏±‡∏î‡∏Ç‡∏≠‡∏ö‡∏î‡∏≥‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    """
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # ‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏µ‡∏î‡∏≥ (threshold = 10 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô)
    coords = cv2.findNonZero((gray > 10).astype(np.uint8))
    
    if coords is not None:
        # ‡∏´‡∏≤ bounding box ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏µ‡∏î‡∏≥
        x, y, w, h = cv2.boundingRect(coords)
        
        # ‡∏ï‡∏±‡∏î‡∏£‡∏π‡∏õ‡∏ï‡∏≤‡∏° bounding box ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        padding = 5
        x = max(0, x - padding)
        y = max(0, y - padding)
        w = min(image.shape[1] - x, w + 2 * padding)
        h = min(image.shape[0] - y, h + 2 * padding)
        
        cropped = image[y:y+h, x:x+w]
        return cropped
    else:
        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏µ‡∏î‡∏≥ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏π‡∏õ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        return image

def create_rotated_images(image_path):
    """
    ‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡∏•‡∏∞ 5 ‡∏≠‡∏á‡∏®‡∏≤ ‡∏à‡∏≤‡∏Å -45 ‡∏ñ‡∏∂‡∏á +45 ‡∏≠‡∏á‡∏®‡∏≤
    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏∞ 1 ‡∏£‡∏π‡∏õ
    """
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    if not os.path.exists(image_path):
        raise ValueError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {image_path}")
    
    # ‡∏´‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    output_dir = os.path.dirname(image_path)
    if not output_dir:
        output_dir = "."  # ‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ path
    
    base_name = os.path.splitext(os.path.basename(image_path))[0]
    
    print(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ: {os.path.basename(image_path)}")
    print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: {output_dir}")
    print("=" * 50)
    
    # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
    created_files = []
    
    # ‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å -45 ‡∏ñ‡∏∂‡∏á +45 ‡∏≠‡∏á‡∏®‡∏≤ ‡∏ó‡∏µ‡∏•‡∏∞ 5 ‡∏≠‡∏á‡∏®‡∏≤
    for angle in range(-45, 50, 5):  # -45 ‡∏ñ‡∏∂‡∏á 45 ‡∏ó‡∏µ‡∏•‡∏∞ 5
        try:
            # ‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏Ç‡∏≠‡∏ö‡∏î‡∏≥
            rotated_img = rotate_image(image_path, angle)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà (‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏ß‡∏Å)
            new_filename = f"{base_name}.{angle}.jpg"
            output_path = os.path.join(output_dir, new_filename)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏´‡∏°‡∏∏‡∏ô
            success = cv2.imwrite(output_path, rotated_img)
            
            if success:
                created_files.append(new_filename)
                print(f"‚úì ‡∏´‡∏°‡∏∏‡∏ô {angle:+3d}¬∞ ‚Üí {new_filename}")
            else:
                print(f"‚úó ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå {new_filename} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                
        except Exception as e:
            print(f"‚úó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏π‡∏õ {angle}¬∞: {e}")
    
    print("=" * 50)
    print(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(created_files)}/{len(range(-45, 50, 5))} ‡πÑ‡∏ü‡∏•‡πå")
    print("\n‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:")
    for filename in created_files:
        print(f"  üìÅ {filename}")
    
    return created_files

def create_sample_image():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏°‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    """
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    img = np.ones((400, 300, 3), dtype=np.uint8) * 255  # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
    
    # ‡∏ß‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏°‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
    # ‡∏ù‡πà‡∏≤‡∏°‡∏∑‡∏≠
    cv2.ellipse(img, (150, 250), (60, 80), 0, 0, 360, (255, 200, 150), -1)
    
    # ‡∏ô‡∏¥‡πâ‡∏ß‡πÇ‡∏õ‡πâ‡∏á
    cv2.ellipse(img, (110, 200), (15, 35), -30, 0, 360, (255, 200, 150), -1)
    
    # ‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ
    cv2.rectangle(img, (130, 140), (150, 200), (255, 200, 150), -1)
    cv2.ellipse(img, (140, 140), (10, 15), 0, 0, 360, (255, 200, 150), -1)
    
    # ‡∏ô‡∏¥‡πâ‡∏ß‡∏Å‡∏•‡∏≤‡∏á
    cv2.rectangle(img, (150, 120), (170, 200), (255, 200, 150), -1)
    cv2.ellipse(img, (160, 120), (10, 15), 0, 0, 360, (255, 200, 150), -1)
    
    # ‡∏ô‡∏¥‡πâ‡∏ß‡∏ô‡∏≤‡∏á
    cv2.rectangle(img, (170, 140), (190, 200), (255, 200, 150), -1)
    cv2.ellipse(img, (180, 140), (10, 15), 0, 0, 360, (255, 200, 150), -1)
    
    # ‡∏ô‡∏¥‡πâ‡∏ß‡∏Å‡πâ‡∏≠‡∏¢
    cv2.rectangle(img, (190, 160), (210, 200), (255, 200, 150), -1)
    cv2.ellipse(img, (200, 160), (10, 15), 0, 0, 360, (255, 200, 150), -1)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏ö‡∏°‡∏∑‡∏≠
    cv2.ellipse(img, (150, 250), (60, 80), 0, 0, 360, (200, 150, 100), 3)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    cv2.putText(img, 'HAND SAMPLE', (80, 350), cv2.FONT_HERSHEY_SIMPLEX, 
                0.8, (0, 0, 0), 2, cv2.LINE_AA)
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ
    cv2.imwrite('Hand_0011336.jpg', img)
    return 'Hand_0011336.jpg'

# ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if __name__ == "__main__":
    # ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏ö‡∏∏
    image_path = r"C:\Users\PC\Downloads\45-45\image1068_jpg.rf.195fdd7d4a598c5975231c0e890683b1.jpg"
    
    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not os.path.exists(image_path):
        print(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {image_path}")
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ó‡∏ô...")
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå
        sample_image = create_sample_image()
        image_path = "Hand_0011336.jpg"
        print("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß: Hand_0011336.jpg")
    else:
        print(f"‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {os.path.basename(image_path)}")
    
    try:
        created_files = create_rotated_images(image_path)
        print(f"\nüéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•! ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ {len(created_files)} ‡πÑ‡∏ü‡∏•‡πå")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        print("\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
        print("1. ‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á")
        print("2. ‡∏ß‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á opencv-python ‡πÅ‡∏•‡∏∞ numpy ‡πÅ‡∏•‡πâ‡∏ß")
        print("3. ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ")
